// Material settings: Opacity 0.99; Advanced-> Two Sided : true

float Script : STANDARDSGLOBAL
<
	string Script = "Public;"
>;

#include "FXConstantDefs.cfi"

cbuffer CBPerDraw : register(b0)
{
	float3x4  CD_WorldMatrix;
};

static const float3x3 rotation = float3x3(1.0,0.0,0.0,0.0,0.0,-1.0,0.0,1.0,0.0);

float3 hash (float2 p)
{
	float3 q = float3( dot(p,float2(127.1,311.7)), dot(p,float2(269.5,183.3)), dot(p,float2(419.2,371.9)) );
	return frac(sin(q)*43758.5453);
}

float map (float3 p)
{
	float3 q = (p - float3(5,0,5) * floor(p/float3(5,0,5)))-0.5*float3(5,0,5);
	float2 d = float2( length(q.xz)-2.0+0.5, abs(q.y) - 1.25 );
	return min(p.y-1.0,min(max(d.x,d.y),0.0) + length(max(d,0.0)) - 0.5);
}

float ao (float3 p, float3 n) 
{
	float v = 0.0;
	p += n*0.035;
	float t = 0.0;
	for (int i=0; i<9; i++)
	{
		float d = map(p);
		v += abs(d) * rsqrt( d*d + t*t );
		p += n * d * 0.9;
		t += d * 0.9;
	}
	v *= 0.1;
	return v/((1./0.125-2.)*(1.-v)+1.)*4.;
}

float3 normal (float3 p)
{
	float3 x = float3 (0.01,0.00,0.00);
	float3 y = float3 (0.00,0.01,0.00);
	float3 z = float3 (0.00,0.00,0.01);
	return normalize(float3(map(p+x)-map(p-x), map(p+y)-map(p-y), map(p+z)-map(p-z))); 
}

float4 shading (float3 p)
{
	float3 L = normalize(float3(50,50,50));
	float3 N = normal(p);
	float3 C = max(hash(floor(p.xz*0.005*20.0)/20.0), 0.25)*p.y;
	return float4((max(dot(L, N),0.0)) * C * ao(p,N), 1.0);
}

float4 raymarch (float3 ro, float3 rd)
{
	for (int i=0; i<128; i++)
	{
		float t = map(ro);
		if ( t<0.001 ) return shading(ro);
		ro+=t*rd;
	}
	return float4(0,0,0,0);
}

void VSMain (float4 vertex:POSITION, inout float2 uv:TEXCOORD0, out float4 position:SV_POSITION)
{
	float4x4 m = float4x4( CD_WorldMatrix[0], CD_WorldMatrix[1], CD_WorldMatrix[2], float4(0, 0, 0, 1));
	m[0][3] -= g_VS_WorldViewPos.x;
	m[1][3] -= g_VS_WorldViewPos.y;
	m[2][3] -= g_VS_WorldViewPos.z;
	float4 WorldPos = mul( m, float4(vertex.xyz, 1.0f) );
	position = mul(g_VS_ViewProjZeroMatr, WorldPos); 
}

half4 PSMain (float2 uv:TEXCOORD0) : SV_Target0
{
	float time = CV_AnimGenParams.z;
	float2 p = 3.275 * float2(2.0*uv.xy-1.0);
	float3 ro = float3(0,50,0);
	float3 rd = normalize(mul(rotation,float3(p,2.0)));
	return pow(raymarch(ro,rd), 2.2);
}

technique General <>
{
	pass p0
	{
		VertexShader = VSMain();
		PixelShader = PSMain();
		ZEnable = true;
		ZWriteEnable = true;
		CullMode = Back;
	}
}
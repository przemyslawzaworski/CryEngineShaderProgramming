// Material settings: Opacity 0.99; Advanced-> Two Sided : true

float Script : STANDARDSGLOBAL
<
	string Script = "Public;"
>;

#include "FXConstantDefs.cfi"

cbuffer CBPerDraw : register(b0)
{
	float3x4  CD_WorldMatrix;
};

float smin(float a, float b, float r)
{
	float h = saturate (0.5 + 0.5 * (b - a) / r);
	return lerp (b, a, h) - r * h * (1. - h);
}

float map(float3 pos)
{
	float x = 2./(6.0 + 1.05);
	float y = 0.13 + 0.025 * 6.0;
	pos.xz = float2(pos.x*0.7071 - pos.z*0.7071, pos.x*0.7071 + pos.z*0.7071);
	pos.xz = (fmod(floor(pos.x) + floor(pos.z), 2.)==0.) ? pos.zx : pos.xz; 
	pos = float3(frac(pos.x*6.0) - 0.5, pos.y, frac(pos.z) - 0.5);   
	float a = -(length(float3( x, 0, 0) - pos*float3(1, 10, 1)) - x - y);
	float b = -(length(float3(-x, 0, 0) - pos*float3(1, 10, 1)) - x - y);
	float k = -smin(a, b, 0.06);   
	return - smin(-smin(pos.y, k, 0.01), -(pos.y - 0.1), 0.12);
}

float4 shading (float3 p)
{
	float2 q = float2(0, 0.001);
	float3 n = normalize(float3(map(p+q.yxx)-map(p-q.yxx),map(p+q.xyx)-map(p-q.xyx),map(p+q.xxy)-map(p-q.xxy)));
	float3 l = normalize(float3(10,10,10));
	return float4(clamp(dot(n, l), 0., 1.).xxx, 1.); 
}

float4 raymarch (float3 ro, float3 rd)
{
	for (int i=0; i<32; i++)
	{
		float t = map(ro);
		if ( t<0.001 ) return shading (ro);
		ro+=t*rd;
	}
	return 0;
}

void VSMain (float4 vertex:POSITION, inout float2 uv:TEXCOORD0, out float4 position:SV_POSITION)
{
	float4x4 m = float4x4( CD_WorldMatrix[0], CD_WorldMatrix[1], CD_WorldMatrix[2], float4(0, 0, 0, 1));
	m[0][3] -= g_VS_WorldViewPos.x;
	m[1][3] -= g_VS_WorldViewPos.y;
	m[2][3] -= g_VS_WorldViewPos.z;
	float4 WorldPos = mul( m, float4(vertex.xyz, 1.0f) );
	position = mul(g_VS_ViewProjZeroMatr, WorldPos); 
}

half4 PSMain (float2 uv:TEXCOORD0) : SV_Target0
{
	float time = CV_AnimGenParams.z;
	float2 p = float2(2.0*uv-1.0);
	float3 ro = float3(0., 5., 0.);
	float3 rd = normalize(mul(float3x3(1,0,0,0,0,-1,0,1,0), float3(p * 2.0, 2.0)));
	return pow(raymarch(ro,rd), 2.2);
}

technique General <>
{
	pass p0
	{
		VertexShader = VSMain();
		PixelShader = PSMain();
		ZEnable = true;
		ZWriteEnable = true;
		CullMode = Back;
	}
}
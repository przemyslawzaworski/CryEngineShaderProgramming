// Material settings: Opacity 0.99; Advanced-> Two Sided : true

float Script : STANDARDSGLOBAL
<
	string Script = "Public;"
>;

#include "FXConstantDefs.cfi"
#define time CV_AnimGenParams.z

cbuffer CBPerDraw : register(b0)
{
	float3x4  CD_WorldMatrix;
};

float hash(float h)
{
	return frac(sin(h) * 43758.5453123);
}

float noise(float3 x)
{
	float3 p = floor(x);
	float3 i = frac(x);
	i = i * i * (3.0 - 2.0 * i);
	float n = p.x + p.y * 157.0 + 113.0 * p.z;
	float a = hash(n + 0.0);
	float b = hash(n + 1.0);
	float c = hash(n + 157.0);
	float d = hash(n + 158.0);
	float e = hash(n + 113.0);
	float f = hash(n + 114.0);
	float g = hash(n + 270.0);
	float h = hash(n + 271.0);
	return lerp(lerp(lerp(a,b,i.x),lerp(c,d,i.x),i.y),lerp(lerp(e,f,i.x),lerp(g,h,i.x),i.y),i.z);
}

float map(float3 p)
{
	float f = 0.0;
	f = 0.5000*noise(p);  p *= 2.01; p.z = time*0.125; p.x += time*0.25;
	f += 0.2500*noise(p);  p *= 2.02; p.z = time*0.0625; p.x += time*0.25;
	f += 0.1250*noise(p);
	return f;
}

void VSMain (float4 vertex:POSITION, inout float2 uv:TEXCOORD0, out float4 position:SV_POSITION, out float offset:TEXCOORD1)
{
	offset = map(float3(3.0*uv.xy , time*0.3));
	vertex.z += 4.0*offset;
	float4x4 m = float4x4( CD_WorldMatrix[0], CD_WorldMatrix[1], CD_WorldMatrix[2], float4(0, 0, 0, 1));
	m[0][3] -= g_VS_WorldViewPos.x;
	m[1][3] -= g_VS_WorldViewPos.y;
	m[2][3] -= g_VS_WorldViewPos.z;
	float4 WorldPos = mul( m, float4(vertex.xyz, 1.0f) );
	position = mul(g_VS_ViewProjZeroMatr, WorldPos); 
}

half4 PSMain (float2 uv:TEXCOORD0, float offset:TEXCOORD1) : SV_Target0
{
	return float4(float3(0.3, 0.5, 1.0) * offset ,1.0);
}

technique General <>
{
	pass p0
	{
		VertexShader = VSMain();
		PixelShader = PSMain();
		ZEnable = true;
		ZWriteEnable = true;
		CullMode = Back;
	}
}